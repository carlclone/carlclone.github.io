import (
	"errors"
	"fmt"
)

func main() {
	n:=[]int{1,5,11,5}
	fmt.Println(canPartition(n))
}


/*
Given a non-empty array nums containing only positive integers,
find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.



Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1,5,5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 */


func canPartition(nums []int) bool {
	// 先转化为 01 背包
	halfSum,err:=getHalfSum(nums)
	if err!=nil {
		return false
	}


	// dp 初始化 , 画个表格

	/*
	           0 1 2 3 4 5
		1      t t f f f f
		3      t t f t t f
		3      t t f t t f
		3      t t f t t f

			//	1      t t t t
	*/

	dp:=make([][]bool,len(nums))
	for k,_:=range dp {
		dp[k] = make([]bool,halfSum+1)
	}

	for i:=0;i<=halfSum;i++ {
		if nums[0] == i {
			dp[0][i] = true
		}
	}
	for i:=0;i<len(nums);i++ {
		dp[i][0]=true
	}
	//问题转化为尝试找到相加等于 halfSum 的元素
	// dp i j 定义为 到第 i 个元素的时候 , 是否可以凑到 sum 为 j 的组合
	// dp i j , 如果不选第 i 个元素 , dp i-1 j ,  如果选 dp i-1 j- nums[i] , 有一个为 true 则 true
	for i:=1;i<len(nums);i++ {
		for k:=1;k<=halfSum;k++ {
			if dp[i-1][k] {
				dp[i][k]=true
			} else if k-nums[i] >=0 &&dp[i-1][k-nums[i]] {
				dp[i][k]=true
			}
		}
	}
	return dp[len(nums)-1][halfSum]
}

func getHalfSum(nums []int) (int, error) {
	sum:=0
	for _,v:=range nums {
		sum+=v
	}
	if sum%2==1 {
		return 0,errors.New("e")
	}
	half:=sum/2
	return half,nil
}