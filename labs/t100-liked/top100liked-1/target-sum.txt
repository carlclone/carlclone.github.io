import "fmt"

/*
Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3
Example 2:

Input: nums = [1], target = 1
Output: 1
 */

/*
-3-2 -1 0 1 2 3
	1   0 1 0 0
	1   1 0 1 0
	1   0 1
	1
	1
*/

func main() {
	//fmt.Println(findTargetSumWays([]int{1,1,1,1,1},3))
	//	[0,0,0,0,0,0,0,0,1]
	//1
	fmt.Println(findTargetSumWays([]int{0,0,0,0,0,0,0,0,1},1))
}

func findTargetSumWays(nums []int, target int) int {
	memo:=make([]map[int]int,len(nums))
	for k,_:=range memo {
		memo[k] = make(map[int]int)
	}
	s:=&TargetSum{
		nums:   nums,
		target: target,
		memo:memo,
	}
	return s.findWays(len(nums)-1,target)
}

type TargetSum struct {
	nums []int
	target int
	memo []map[int]int
}

func (t *TargetSum) findWays(i,target int) int {
	if i==0 {
		if t.nums[i]==0 && target==0 {
			return 2
		}
		if target==t.nums[i] || target==-t.nums[i] {
			return 1
		}
		return 0
	}
	if v,ok:=t.memo[i][target];ok {
		return v
	}

	res:= t.findWays(i-1,target-t.nums[i]) + t.findWays(i-1,target+t.nums[i])
	t.memo[i][target] = res
	return res
}
